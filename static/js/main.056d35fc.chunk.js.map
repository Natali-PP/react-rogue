{"version":3,"sources":["ImputManager.js","Entity.js","Player.js","World.js","Loot.js","Spawner.js","ReactRogue.js","App.js","index.js"],"names":["ImputManager","observer","handleKeys","e","preventDefault","keyCode","broadcast","x","y","fn","this","push","filter","suscriber","action","data","forEach","document","addEventListener","removeEventListener","Entity","size","attributes","verb","world","console","log","context","fillStyle","color","textBaseline","font","fillText","ascii","offset","Player","name","health","dx","dy","newPlayer","Object","assign","World","width","height","tilesize","entities","worldmap","Array","entity","undefined","tempPlayer","player","copyPlayer","move","isWall","map","Map","Cellular","connected","randomize","userCallback","value","create","connect","drawWall","draw","fillRect","Loot","lootTable","getRandomInt","max","Math","floor","random","Spawner","spawnCount","createEntity","count","add","moveToSpace","spawn","length","ReactRogue","canvasRef","useRef","useState","setWorld","inputManager","handleInput","JSON","stringify","newWorld","movePlayer","useEffect","createCellularMap","spawnLoot","bindKeys","subscribe","unBindKeys","unsuscribe","ctx","current","getContext","clearRect","ref","style","border","background","App","className","ReactDOM","render","getElementById"],"mappings":"sNA+CeA,E,4DA9CXC,SAAS,G,KAeTC,WAAa,SAAAC,GAET,OADAA,EAAEC,iBACKD,EAAEE,SACL,KAAK,GACD,EAAKC,UAAU,OAAQ,CAACC,GAAG,EAAEC,EAAE,IAC/B,MACJ,KAAK,GACD,EAAKF,UAAU,OAAQ,CAACC,EAAE,EAAGC,GAAG,IAChC,MACJ,KAAK,GACD,EAAKF,UAAU,OAAQ,CAACC,EAAE,EAAGC,EAAE,IAC/B,MACJ,KAAK,GACD,EAAKF,UAAU,OAAQ,CAACC,EAAE,EAAGC,EAAE,M,sDA1BjCC,GACNC,KAAKT,SAASU,KAAKF,K,iCAGZA,GACPC,KAAKT,SAAWS,KAAKT,SAASW,QAAO,SAAAC,GAAS,OAAIA,IAAcJ,O,gCAI1DK,EAAQC,GACdL,KAAKT,SAASe,SAAQ,SAAAH,GAAS,OAAIA,EAAUC,EAAQC,Q,iCAwBrDE,SAASC,iBAAiB,UAAWR,KAAKR,c,mCAK1Ce,SAASE,oBAAoB,UAAWT,KAAKR,gB,kCCnBtCkB,E,WAtBX,WAAYb,EAAEC,EAAEa,EAAMC,GAAY,oBAC9BZ,KAAKH,EAAEA,EACPG,KAAKF,EAAEA,EACPE,KAAKW,KAAOA,EACZX,KAAKY,WAAL,eAAoBA,G,mDAGjBC,EAAMC,GACTC,QAAQC,IAAR,gBAAqBH,M,2BAEpBI,GACDA,EAAQC,UAAUlB,KAAKY,WAAWO,OAAS,QAC3CF,EAAQG,aAAe,UACvBH,EAAQI,KAAM,iBACdJ,EAAQK,SACJtB,KAAKY,WAAWW,MAChBvB,KAAKH,EAAIG,KAAKW,MAAQX,KAAKY,WAAWY,OAASxB,KAAKY,WAAWY,OAAO3B,EAAI,GAC1EG,KAAKF,EAAIE,KAAKW,MAAQX,KAAKY,WAAWY,OAASxB,KAAKY,WAAWY,OAAO1B,EAAI,Q,KCevE2B,E,2MAzBXb,WAAa,CACTc,KAAM,SACNH,MAAO,IACPI,OAAQ,I,oEAGPC,EAAGC,GACJ7B,KAAKH,GAAK+B,EACV5B,KAAKF,GAAK+B,I,mCAWV,IAAIC,EAAY,IAAIL,EAEpB,OADAM,OAAOC,OAAOF,EAAW9B,MAClB8B,M,GA3BMpB,G,QCiGNuB,E,WA/FX,WAAYC,EAAOC,EAAQC,GAAU,oBACrCpC,KAAKkC,MAAMA,EACXlC,KAAKmC,OAAOA,EACZnC,KAAKoC,SAASA,EACdpC,KAAKqC,SAAW,CAAC,IAAIZ,EAAO,EAAE,EAAG,KAIjCzB,KAAKsC,SAAU,IAAIC,MAAMvC,KAAKkC,OAE9B,IAAK,IAAIrC,EAAE,EAAGA,EAAGG,KAAKkC,MAAOrC,IACzBG,KAAKsC,SAASzC,GAAK,IAAI0C,MAAMvC,KAAKmC,Q,gDAUlCK,GACAxC,KAAKqC,SAASpC,KAAKuC,K,kCAGXA,GACR,IAAK,IAAI3C,EAAI2C,EAAO3C,EAAGA,EAAIG,KAAKkC,MAAOrC,IACnC,IAAK,IAAIC,EAAI0C,EAAO1C,EAAGA,EAAIE,KAAKmC,OAAQrC,IACpC,GAA2B,IAAxBE,KAAKsC,SAASzC,GAAGC,GAGhB,OAFA0C,EAAO3C,EAAIA,OACX2C,EAAO1C,EAAIA,K,6BAQpBD,EAAEC,GACL,YACyB2C,IAArBzC,KAAKsC,SAASzC,SACO4C,IAArBzC,KAAKsC,SAASxC,IACS,IAAvBE,KAAKsC,SAASzC,GAAGC,K,iCAGd8B,EAAIC,GACX,IAAIa,EAAa1C,KAAK2C,OAAOC,aAC7BF,EAAWG,KAAKjB,EAAGC,GAChB7B,KAAK8C,OAAOJ,EAAW7C,EAAG6C,EAAW5C,GACpCiB,QAAQC,IAAR,6BAAkC0B,EAAW7C,EAA7C,YAAkD6C,EAAW5C,EAA7D,MAGJE,KAAK2C,OAAOE,KAAKjB,EAAIC,K,0CAGL,IAAD,OACXkB,EAAM,IAAIC,IAAIC,SAASjD,KAAKkC,MAAOlC,KAAKmC,OAAQ,CAACe,WAAW,IAChEH,EAAII,UAAU,IACd,IAAIC,EAAe,SAACvD,EAAEC,EAAEuD,GACV,IAANxD,GAAiB,IAANC,GAAWD,IAAM,EAAKqC,MAAQ,GAAKpC,IAAM,EAAKqC,OAAQ,EAKrE,EAAKG,SAASzC,GAAGC,GAAc,IAARuD,EAAa,EAAI,EAJpC,EAAKf,SAASzC,GAAGC,GAAK,GAO9BiD,EAAIO,OAAOF,GACXL,EAAIQ,QAAQH,EAAc,K,2BAGzBnC,GACD,IAAK,IAAIpB,EAAE,EAAGA,EAAGG,KAAKkC,MAAOrC,IACzB,IAAI,IAAIC,EAAE,EAAGA,EAAGE,KAAKmC,OAAQrC,IACG,IAAxBE,KAAKsC,SAASzC,GAAGC,IACjBE,KAAKwD,SAASvC,EAASpB,EAAGC,GAItCE,KAAKqC,SAAS/B,SAAS,SAAAkC,GACnBA,EAAOiB,KAAKxC,Q,+BAIXA,EAASpB,EAAGC,GACjBmB,EAAQC,UAAY,OACpBD,EAAQyC,SACJ7D,EAAIG,KAAKoC,SACTtC,EAAIE,KAAKoC,SACTpC,KAAKoC,SACLpC,KAAKoC,Y,6BAxET,OAAOpC,KAAKqC,SAAS,O,KCRdsB,E,+KAXJ9C,EAAMC,GACI,SAATD,GACAE,QAAQC,IAAI,SAAUhB,MAGb,SAATa,GACAE,QAAQC,IAAI,OAAQhB,U,GAPbU,GCAbkD,EAAY,CACd,CAAClC,KAAM,aAAcP,MAAO,WAAYI,MAAO,IAAKC,OAAO,CAAC3B,EAAE,EAAGC,EAAE,IACnE,CAAC4B,KAAM,gBAAiBP,MAAO,MAAOI,MAAO,IAAKC,OAAO,CAAC3B,EAAE,EAAGC,EAAE,IACjE,CAAC4B,KAAM,YAAaP,MAAO,SAAUI,MAAO,IAAKC,OAAO,CAAC3B,EAAE,EAAGC,EAAE,IAChE,CAAC4B,KAAM,eAAgBP,MAAO,YAAaI,MAAO,IAAKC,OAAO,CAAC3B,EAAE,EAAGC,EAAE,KA2B1E,SAAS+D,EAAaC,GAClB,OAAOC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMF,IAGlCI,M,WA3BX,WAAYpD,GAAO,oBACfd,KAAKc,MAAMA,E,kDAGTqD,EAAYC,GACd,IAAK,IAAIC,EAAQ,EAAGA,EAAQF,EAAYE,IAAS,CAC7C,IAAI7B,EAAS4B,IACbpE,KAAKc,MAAMwD,IAAI9B,GACfxC,KAAKc,MAAMyD,YAAY/B,M,gCAKrB2B,GAAY,IAAD,OACjBnE,KAAKwE,MAAML,GAAY,WACnB,OAAO,IAAIR,EACPE,EAAa,EAAK/C,MAAMoB,OACxB2B,EAAa,EAAK/C,MAAMqB,QAAS,EAAKrB,MAAMsB,SAC5CwB,EAAUC,EAAaD,EAAUa,iB,KC6BlCC,EAnDI,SAAC,GAA+B,IAA9BxC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,SAC1BuC,EAAYC,mBAD4B,EAGpBC,mBAAU,IAAI5C,EAAMC,EAAOC,EAAQC,IAHf,mBAGvCtB,EAHuC,KAGhCgE,EAHgC,KAI1CC,EAAe,IAAIzF,EACjB0F,EAAc,SAAC5E,EAAOC,GACxBU,QAAQC,IAAR,wBAA8BiE,KAAKC,UAAU7E,GAA7C,YAAsDD,IACtD,IAAI+E,EAAW,IAAIlD,EACnBF,OAAOC,OAAOmD,EAAUrE,GACxBqE,EAASC,WAAW/E,EAAKR,EAAIQ,EAAKP,GAClCgF,EAASK,IA+Bb,OA5BAE,qBAAW,WAAOtE,QAAQC,IAAI,cAE1B,IAAImE,EAAW,IAAIlD,EACnBF,OAAOC,OAAOmD,EAAUrE,GACxBqE,EAASG,oBACTH,EAASZ,YAAYzD,EAAM6B,QACb,IAAIuB,EAAQiB,GAClBI,UAAU,IAClBT,EAASK,KAEV,IACHE,qBAAW,WAIP,OAHAtE,QAAQC,IAAI,yBACZ+D,EAAaS,WACbT,EAAaU,UAAUT,GACjB,WACFD,EAAaW,aACbX,EAAaY,WAAWX,OAIhCK,qBAAU,WACNtE,QAAQC,IAAI,qBACZ,IAAM4E,EAAMjB,EAAUkB,QAAQC,WAAW,MACzCF,EAAIG,UAAU,EAAE,EAAE7D,EAAQE,EAASD,EAASC,GAC5CtB,EAAM2C,KAAKmC,MAIX,4BACII,IAAMrB,EACNzC,MAAOA,EAAQE,EACfD,OAAQA,EAASC,EACjB6D,MAAO,CAACC,OAAQ,kBACRC,WAAW,cCxChBC,EAXH,kBAER,yBAAKC,UAAU,OACb,kBAAC,EAAD,CACEnE,MAAO,GACPC,OAAQ,GACRC,SAAU,OCJlBkE,IAASC,OAAO,kBAAC,EAAD,MAAShG,SAASiG,eAAe,W","file":"static/js/main.056d35fc.chunk.js","sourcesContent":["class ImputManager{\n    observer=[]\n\n    subscribe(fn){\n        this.observer.push(fn)\n    }\n\n    unsuscribe(fn){\n        this.observer = this.observer.filter(suscriber => suscriber !== fn)\n\n    }\n\n    broadcast(action, data){\n        this.observer.forEach(suscriber => suscriber(action, data))\n    }\n\n    handleKeys = e => {\n        e.preventDefault()\n        switch(e.keyCode){\n            case 37: // <-- flecha izquierda\n                this.broadcast('move', {x:-1,y:0})\n                break\n            case 38: // flecha arriba\n                this.broadcast('move', {x:0, y:-1})\n                break\n            case 39: // --> flecha derecha\n                this.broadcast('move', {x:1, y:0})\n                break\n            case 40: // flecha abajo\n                this.broadcast('move', {x:0, y:1})\n                break\n            default:\n                break\n        }\n    }\n\n    bindKeys(){\n        document.addEventListener('keydown', this.handleKeys);\n\n    }\n\n    unBindKeys(){\n        document.removeEventListener('keydown', this.handleKeys)\n    }\n}\n\n\nexport default ImputManager;\n","class Entity{\n    constructor(x,y,size, attributes){\n        this.x=x;\n        this.y=y\n        this.size = size\n        this.attributes={...attributes}\n    }\n    \n    action(verb, world){\n        console.log(`Verb: ${verb}`)\n    }\n    draw(context){\n        context.fillStyle=this.attributes.color || 'white'\n        context.textBaseline = 'hanging'\n        context.font= '16px Helvetica'\n        context.fillText(\n            this.attributes.ascii, \n            this.x * this.size + (this.attributes.offset ? this.attributes.offset.x : 0), \n            this.y * this.size + (this.attributes.offset ? this.attributes.offset.y : 0)\n        )\n    }\n}\n\nexport default Entity","import Entity from \"./Entity\"\n\nclass Player extends Entity{\n    /* constructor(x,y,size){\n        this.x=x\n        this.y=y\n        this.size=size\n    } */\n    attributes = {\n        name: 'Player',\n        ascii: '@',\n        health: 10\n    }\n    \n    move(dx,dy){\n        this.x += dx\n        this.y += dy\n    }\n\n    /* draw(context){\n        context.fillStyle = '#f00'\n        context.textBaseline = 'hanging'\n        context.font = '16px Helvetica'\n        context.fillText('@', this.x * this.size, this.y * this.size)\n    } */\n\n    copyPlayer(){\n        let newPlayer = new Player()\n        Object.assign(newPlayer, this)\n        return newPlayer\n    }\n}\n\nexport default Player","import {Map} from 'rot-js';\nimport Player from './Player'\n\nclass World {\n    constructor(width, height, tilesize){\n    this.width=width\n    this.height=height\n    this.tilesize=tilesize\n    this.entities = [new Player(0,0, 16)]\n    //console.warn(this.entities[0])    \n    //como va a ser un mundo en 2D\n\n    this.worldmap= new Array(this.width)\n    \n    for (let x=0; x< this.width; x++){\n        this.worldmap[x] = new Array(this.height)\n        }\n\n        \n    }\n\n    get player(){\n        return this.entities[0]\n    }\n\n    add(entity){\n        this.entities.push(entity)\n    }\n    \n    moveToSpace(entity){\n        for (let x = entity.x; x < this.width; x++) {\n            for (let y = entity.y; y < this.height; y++) {\n                if(this.worldmap[x][y] === 0){\n                    entity.x = x\n                    entity.y = y\n                    return\n                };\n                \n            }\n            \n        }\n    }\n    isWall(x,y){\n        return(\n            this.worldmap[x] === undefined || \n            this.worldmap[y] === undefined || \n            this.worldmap[x][y] ===1)\n    }\n\n    movePlayer(dx, dy){\n        let tempPlayer = this.player.copyPlayer()\n        tempPlayer.move(dx,dy);\n        if(this.isWall(tempPlayer.x, tempPlayer.y)){\n            console.log(`camino bloqueado a ${tempPlayer.x}:${tempPlayer.y}!`)\n        }\n        else{\n        this.player.move(dx, dy);}\n    }\n\n    createCellularMap(){\n        var map = new Map.Cellular(this.width, this.height, {connected: true})\n        map.randomize(0.5);\n        var userCallback = (x,y,value) => {\n            if (x === 0 || y === 0 || x === this.width - 1 || y === this.height -1){\n                this.worldmap[x][y] = 1 // create walls around edges of the map\n                return\n            }\n\n            this.worldmap[x][y] = (value===0) ? 1 : 0;\n        }\n\n        map.create(userCallback)\n        map.connect(userCallback, 1)\n    }\n\n    draw(context){\n        for (let x=0; x< this.width; x++){\n            for(let y=0; y< this.height; y++){\n                if (this.worldmap[x][y] === 1 ){\n                    this.drawWall(context, x, y)\n                }\n            }\n        }\n        this.entities.forEach( entity => {\n            entity.draw(context)\n        });\n    }\n\n    drawWall(context, x, y){\n        context.fillStyle = '#000';\n        context.fillRect(\n            x * this.tilesize,\n            y * this.tilesize,\n            this.tilesize,\n            this.tilesize\n        )\n    }\n}\n\nexport default World","import Entity from \"./Entity\";\n\nclass Loot extends Entity{\n    action(verb, world){\n        if (verb === 'bump'){\n            console.log('pickup', this)\n        }\n\n        if (verb === 'drop'){\n            console.log('drop', this)\n        }\n    }\n}\n\nexport default Loot","import Loot from './Loot'\n\nconst lootTable = [\n    {name: 'Long Sword', color: 'darkgrey', ascii: '/', offset:{x:6, y:3}},\n    {name: 'Health Potion', color: 'red', ascii: '!', offset:{x:6, y:3}},\n    {name: 'Gold coin', color: 'yellow', ascii: '$', offset:{x:3, y:3}},\n    {name: 'Light Armour', color: 'lightgrey', ascii: '#', offset:{x:4, y:3}}\n]\n\nclass Spawner{\n    constructor(world){\n        this.world=world\n    }\n\n    spawn(spawnCount, createEntity){\n        for (let count = 0; count < spawnCount; count++) {\n            let entity = createEntity();\n            this.world.add(entity)\n            this.world.moveToSpace(entity)\n            \n        }\n    }\n\n    spawnLoot(spawnCount){\n        this.spawn(spawnCount, () => {\n            return new Loot(\n                getRandomInt(this.world.width),\n                getRandomInt(this.world.height), this.world.tilesize, \n                lootTable[getRandomInt(lootTable.length)])\n        })\n    }\n}\n\nfunction getRandomInt(max){\n    return Math.floor(Math.random() * Math.floor(max))\n}\n\nexport default Spawner","import React, {useRef, useEffect, useState} from 'react'\nimport ImputManager from './ImputManager'\nimport Player from './Player'\nimport World from './World'\nimport Spawner from './Spawner'\n\nconst ReactRogue = ({width, height, tilesize}) => {\n    const canvasRef = useRef()\n    //const [player, setPlayer] = useState(new Player(1,2,tilesize))\n    const [world, setWorld] = useState( new World(width, height, tilesize))\n    let inputManager = new ImputManager() \n    const handleInput = (action,data) => {\n        console.log( `handle input: ${JSON.stringify(data)} ${action}`)\n        let newWorld = new World()\n        Object.assign(newWorld, world)\n        newWorld.movePlayer(data.x , data.y)\n        setWorld(newWorld)\n    }\n\n    useEffect( () => {console.log('create map')\n\n        let newWorld = new World()\n        Object.assign(newWorld, world)\n        newWorld.createCellularMap()\n        newWorld.moveToSpace(world.player)\n        let spawner = new Spawner(newWorld)\n        spawner.spawnLoot(10)\n        setWorld(newWorld)\n        // eslint-disable-next-line \n    }, [])\n    useEffect( () => {\n        console.log('binding input manager')\n        inputManager.bindKeys()\n        inputManager.subscribe(handleInput)\n        return() => {\n            inputManager.unBindKeys()\n            inputManager.unsuscribe(handleInput)\n        }\n    })\n\n    useEffect(() => {\n        console.log('Dibujar el canvas')\n        const ctx = canvasRef.current.getContext('2d')\n        ctx.clearRect(0,0,width * tilesize,height * tilesize)\n        world.draw(ctx);\n        \n    })\n    return(\n        <canvas \n            ref= {canvasRef}\n            width={width * tilesize}\n            height={height * tilesize}\n            style={{border: '1px solid black',\n                    background:'DimGrey'}}>\n        </canvas>\n)}\n\nexport default ReactRogue","import React from 'react';\nimport ReactRogue from './ReactRogue'\nconst App = () => (\n  \n    <div className=\"App\">\n      <ReactRogue  \n        width={40} //en cantidad de tiles\n        height={40} // en cantidad de tiles\n        tilesize={16} /* en px/ */ /> \n    </div>\n  )\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}