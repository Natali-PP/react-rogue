{"version":3,"sources":["ImputManager.js","Player.js","World.js","ReactRogue.js","App.js","index.js"],"names":["ImputManager","observer","handleKeys","e","preventDefault","keyCode","broadcast","x","y","fn","this","push","filter","suscriber","action","data","forEach","document","addEventListener","removeEventListener","Player","size","dx","dy","context","fillStyle","textBaseline","font","fillText","newPlayer","Object","assign","World","width","height","tilesize","entities","worldmap","Array","entity","undefined","tempPlayer","player","copyPlayer","move","isWall","console","log","map","Map","Cellular","connected","randomize","userCallback","value","create","connect","drawWall","draw","fillRect","ReactRogue","canvasRef","useRef","useState","world","setWorld","inputManager","handleInput","JSON","stringify","newWorld","movePlayer","useEffect","createCellularMap","moveToSpace","bindKeys","subscribe","unBindKeys","unsuscribe","ctx","current","getContext","clearRect","ref","style","border","App","className","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.6e9fe2c6.chunk.js","sourcesContent":["class ImputManager{\n    observer=[]\n\n    subscribe(fn){\n        this.observer.push(fn)\n    }\n\n    unsuscribe(fn){\n        this.observer = this.observer.filter(suscriber => suscriber !== fn)\n\n    }\n\n    broadcast(action, data){\n        this.observer.forEach(suscriber => suscriber(action, data))\n    }\n\n    handleKeys = e => {\n        e.preventDefault()\n        switch(e.keyCode){\n            case 37: // <-- flecha izquierda\n                this.broadcast('move', {x:-1,y:0})\n                break\n            case 38: // flecha arriba\n                this.broadcast('move', {x:0, y:-1})\n                break\n            case 39: // --> flecha derecha\n                this.broadcast('move', {x:1, y:0})\n                break\n            case 40: // flecha abajo\n                this.broadcast('move', {x:0, y:1})\n                break\n            default:\n                break\n        }\n    }\n\n    bindKeys(){\n        document.addEventListener('keydown', this.handleKeys);\n\n    }\n\n    unBindKeys(){\n        document.removeEventListener('keydown', this.handleKeys)\n    }\n}\n\n\nexport default ImputManager;\n","class Player{\n    constructor(x,y,size){\n        this.x=x\n        this.y=y\n        this.size=size\n    }\n\n    move(dx,dy){\n        this.x += dx\n        this.y += dy\n    }\n\n    draw(context){\n        context.fillStyle = '#f00'\n        context.textBaseline = 'hanging'\n        context.font = '16px Helvetica'\n        context.fillText('@', this.x * this.size, this.y * this.size)\n    }\n\n    copyPlayer(){\n        let newPlayer = new Player()\n        Object.assign(newPlayer, this)\n        return newPlayer\n    }\n}\n\nexport default Player","import {Map} from 'rot-js';\nimport Player from './Player'\n\nclass World {\n    constructor(width, height, tilesize){\n    this.width=width\n    this.height=height\n    this.tilesize=tilesize\n    this.entities = [new Player(0,0, 16)]\n    //console.warn(this.entities[0])    \n    //como va a ser un mundo en 2D\n\n    this.worldmap= new Array(this.width)\n    \n    for (let x=0; x< this.width; x++){\n        this.worldmap[x] = new Array(this.height)\n        }\n\n        \n    }\n\n    get player(){\n        return this.entities[0]\n    }\n\n    moveToSpace(entity){\n        for (let x = entity.x; x < this.width; x++) {\n            for (let y = entity.y; y < this.height; y++) {\n                if(this.worldmap[x][y] === 0){\n                    entity.x = x\n                    entity.y = y\n                    return\n                };\n                \n            }\n            \n        }\n    }\n    isWall(x,y){\n        return(\n            this.worldmap[x] === undefined || \n            this.worldmap[y] === undefined || \n            this.worldmap[x][y] ===1)\n    }\n\n    movePlayer(dx, dy){\n        let tempPlayer = this.player.copyPlayer()\n        tempPlayer.move(dx,dy);\n        if(this.isWall(tempPlayer.x, tempPlayer.y)){\n            console.log(`camino bloqueado a ${tempPlayer.x}:${tempPlayer.y}!`)\n        }\n        else{\n        this.player.move(dx, dy);}\n    }\n\n    createCellularMap(){\n        var map = new Map.Cellular(this.width, this.height, {connected: true})\n        map.randomize(0.5);\n        var userCallback = (x,y,value) => {\n            if (x === 0 || y === 0 || x === this.width - 1 || y === this.height -1){\n                this.worldmap[x][y] = 1 // create walls around edges of the map\n                return\n            }\n\n            this.worldmap[x][y] = (value===0) ? 1 : 0;\n        }\n\n        map.create(userCallback)\n        map.connect(userCallback, 1)\n    }\n\n    draw(context){\n        for (let x=0; x< this.width; x++){\n            for(let y=0; y< this.height; y++){\n                if (this.worldmap[x][y] === 1 ){\n                    this.drawWall(context, x, y)\n                }\n            }\n        }\n        this.entities.forEach( entity => {\n            entity.draw(context)\n        });\n    }\n\n    drawWall(context, x, y){\n        context.fillStyle = '#000';\n        context.fillRect(\n            x * this.tilesize,\n            y * this.tilesize,\n            this.tilesize,\n            this.tilesize\n        )\n    }\n}\n\nexport default World","import React, {useRef, useEffect, useState} from 'react'\nimport ImputManager from './ImputManager'\nimport Player from './Player'\nimport World from './World'\n\nconst ReactRogue = ({width, height, tilesize}) => {\n    const canvasRef = useRef()\n    //const [player, setPlayer] = useState(new Player(1,2,tilesize))\n    const [world, setWorld] = useState( new World(width, height, tilesize))\n    let inputManager = new ImputManager() \n    const handleInput = (action,data) => {\n        console.log( `handle input: ${JSON.stringify(data)} ${action}`)\n        let newWorld = new World()\n        Object.assign(newWorld, world)\n        newWorld.movePlayer(data.x , data.y)\n        setWorld(newWorld)\n    }\n\n    useEffect( () => {console.log('create map')\n\n        let newWorld = new World()\n        Object.assign(newWorld, world)\n        newWorld.createCellularMap()\n        newWorld.moveToSpace(world.player)\n        setWorld(newWorld)\n        // eslint-disable-next-line \n    }, [])\n    useEffect( () => {\n        console.log('binding input manager')\n        inputManager.bindKeys()\n        inputManager.subscribe(handleInput)\n        return() => {\n            inputManager.unBindKeys()\n            inputManager.unsuscribe(handleInput)\n        }\n    })\n\n    useEffect(() => {\n        console.log('Dibujar el canvas')\n        const ctx = canvasRef.current.getContext('2d')\n        ctx.clearRect(0,0,width * tilesize,height * tilesize)\n        world.draw(ctx);\n        \n    })\n    return(\n        <canvas \n            ref= {canvasRef}\n            width={width * tilesize}\n            height={height * tilesize}\n            style={{border: '1px solid black'}}>\n        </canvas>\n)}\n\nexport default ReactRogue","import React from 'react';\nimport ReactRogue from './ReactRogue'\nconst App = () => (\n  \n    <div className=\"App\">\n      <ReactRogue  \n        width={40} //en cantidad de tiles\n        height={40} // en cantidad de tiles\n        tilesize={16} /* en px/ */ /> \n    </div>\n  )\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}